% To test picture expressions
% This program should work and be accepted.

picture a, b, c, d, e, f, g, h, i, j, k, l, m;
numeric wa, wb, wc, wd, we, wf, wg, wh, wi, wj, wk, wl, wm;

% 'a' must be a 10x10 white transparent image
a = nullpicture (10, 10);
wa = totalweight a;
% 'b' must be a 10x10 black opaque image
b = +(- (+ a));
wb = totalweight b;
% 'c' is 10x10 black opaque with a 2x10 white transparent part at the center
% The expression below is equivalent to just "c = b - -nullpicture(2, 10);"
c = b - -nullpicture(2, 10) - -nullpicture(2, 10) - nullpicture(4, 4);
wc = totalweight c;
% 'd' is like 'c', but with 4 more pixels black and opaque
% The expression below is equivalent to "d = c + -nullpicture(10, 2);"
d = c + -nullpicture(10, 2) + nullpicture(4, 4);
wd = totalweight d;
% 'e' must be equal 'c'. If the rotation works, the code below is equivalent
% to "e=c;" as we are erasing from an already empty area. If the rotation
% doesn't work, then 'e' will be different than 'c'.
e = c - (-nullpicture(10, 2) rotated 90);
we = totalweight e;
% 'f' also must be similar to 'c' if the scaling works.
% The diffence is because linear interpolation of pixels when scaling
f = ((-nullpicture(5, 5)) - (-nullpicture(1, 5))) scaled 2;
wf = totalweight f;
% 'g' is equal 'f horizontally. But has height 5.
g = ((-nullpicture(5, 5)) - (-nullpicture(1, 5))) xscaled 2;
wg = totalweight g;
% 'h' is a 5x10 picture with a single central column of transparent
% white pixel, with other columns black and opaque
h = ((-nullpicture(5, 5)) - (-nullpicture(1, 5))) yscaled 2;
wh = totalweight h;
% 'i' is when we shift a single pixel picture by (2, 1). The resulting image
% now is 5x3 because the pixel that before was the center of the image
% should not change. This makes us insert padding transparent white pixels
% in the opposite direction
i = ((-nullpicture(1, 1)) shifted (1, 1)) shifted (1, 0);
wi = totalweight i;
% 'j' will allow us to test the slanting operation
j = (-nullpicture(3, 3)) slanted 1;
wj = totalweight j;
% 'k' will allow us to test the zscaling operation
k = (-nullpicture(1, 1)) zscaled (3, 4);
wk = totalweight k;
% 'l' will allow us to test a generic transform. In practice we will
% express the same zscaling above and we should get the same result
l = (-nullpicture(1, 1)) transformed (0, 0, 3, -4, 4, 3);
wl = totalweight l;
% 'm' will allow us to test subpictures
m = subpicture (2, 1) and (3, 1) of (i + (-nullpicture(1, 1)));
wm = totalweight m;


